#Polymorphism: Here object, classes can share same method name but that method name cannot differently based on wht object calls them
# classes have same method name but does diffrent work


class User():
  def sign_in(self):
    print("Please sign in")

class Wizard(User):
  def __init__(self,name,power):
    self.name=name
    self.power=power

  def attack(self):
    print(f"{self.name} is a attacker who attacks with the power of {self.power}")

class Archer(User):
  def __init__(self,name,num_arrows):
    self.name=name
    self.num_arrows=num_arrows

  def attack(self):
    print(f"{self.name} is a attacker who attacks with the remaining {self.num_arrows} arrows.")

wizard1= Wizard("Merlin", 30)
archer1= Archer("Robin", 233)

# Classes have same method named attack but serves differently
print(wizard1.attack())
print(archer1.attack())

#Can also be explained by:
def player_attack (char):
  char.attack()

player_attack(wizard1)
player_attack(archer1)

# OR can be written as list

for char in [Wizard, Archer]:
  char.attack()



#If there was attack method in User, it would overwite whenever we try by colling objets

class User():
  def sign_in(self):
    print("Please sign in")
  
  def attack(self):
    print("do nothing")

class Wizard(User):
  def __init__(self,name,power):
    self.name=name
    self.power=power

  def attack(self):
    print(f"{self.name} is a attacker who attacks with the power of {self.power}")

class Archer(User):
  def __init__(self,name,num_arrows):
    self.name=name
    self.num_arrows=num_arrows

  def attack(self):
    print(f"{self.name} is a attacker who attacks with the remaining {self.num_arrows} arrows.")

wizard1= Wizard("Merlin", 30)
archer1= Archer("Robin", 233)

print(wizard1.attack())
print(archer1.attack())




# Attack method of User can be run or print like this:

class User():
  def sign_in(self):
    print("Please sign in")
  
  def attack(self):
    print("do nothing")

class Wizard(User):
  def __init__(self,name,power):
    User.attack(self)
    self.name=name
    self.power=power

  def attack(self):
    print(f"{self.name} is a attacker who attacks with the power of {self.power}")

class Archer(User):
  def __init__(self,name,num_arrows):
    self.name=name
    self.num_arrows=num_arrows

  def attack(self):
    print(f"{self.name} is a attacker who attacks with the remaining {self.num_arrows} arrows.")

wizard1= Wizard("Merlin", 30)
archer1= Archer("Robin", 233)


print(wizard1.attack())
print(archer1.attack())
